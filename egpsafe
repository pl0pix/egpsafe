#!/bin/bash - 

#
#  This program is free software; you can redistribute it and/or modify 
#  it under the terms of the GNU General Public License as published by 
#  the Free Software Foundation; either version 2 of the License, or    
#  (at your option) any later version.                                  
#

#===============================================================================
#
#          FILE:  egpsafe
# 
#         USAGE:  egpsafe [-hVv] [edit|see|search [<keyword>]|merge]
# 
#   DESCRIPTION: stores your passwords in a gpg encrypted file. 
#                The list of option may not complete see usage() for a complete
#                list.
#
#       OPTIONS:  -h this information
#                 -V prints version end exits
#                 -v enable verbose output
#                 -D enable debug mode
#                 
#  REQUIREMENTS:  ---
#          BUGS:  ---
#         NOTES:  Originally written by Ben Reser <ben@reser.org> Shell script
#         to decrypt a file to a temp file.  Edit it.  Re-encrypt the file and
#         then wipe the temp file from the drive.  requires gpg and wipe.  
#         * added secure way of generating a tmp file. -- erik@code.de 
#         * added handling of an alternate place for gpg and password file for usb
#           memory stick handling -- erik@code.de 
#         * added darwin support -- erik@code.de 
#         * added encryption for one or more recipients -- erik@code.de 
#         * added four modes edit, see, search, merge -- erik@code.de
#        AUTHOR: Erik Wenzel, <erik@code.de>
#       COMPANY: 
#       CREATED: 11.12.2010 22:01:05 CET
#      REVISION: %%VERSION%%
#===============================================================================

PROGRAM=`basename "$0"`
VERSION="%%VERSION%%"
DEBUG=${DEBUG:=0}

# Shorten PATH to standard pathes for invoking user. This is for security.
PATH="/bin:/usr/bin"

# specify recipients who are able to decrypt your password file This is useful
# for people with a private gpg key and different gpg key for business.
# The recipient key must already imported in used keychain. Do not enter a
# key with spaces. They are currently not supported.
RECIPIENT_KEY_ID=0x720DF241

# password base filename it gets the .gpg extension on encryption
PASSWORD_FILE=".password"

# specify the point where the usb stick is mounted
MOUNTPOINT=/media/sda1
# specify path to encrypted password file (relative to MOUNTPOINT) so: no
# leading /
USB_PASSWORD_DIR=""
# If USB memory device is mounted, it uses gpg key on that device
USB_GNUPG_DIR=".gnupg/"
 
## Merge variables
# remote (hup) path to password file
# check scp(1) man page for URL syntax
SCP_OPTIONS="-Bqp"
HUP_PASSWORD_FILE="10.9.9.2:${HOME}${PASSWORD_FILE}.gpg"

## Global vars
# check for OS and their defaults
_uname=`uname`
case "$_uname" in
	Linux*)
		PASSWORD_DIR=${HOME}
		PATH=/bin:/usr/bin
		MERGE_BIN="meld"
		;;
	Darwin*)
		PASSWORD_DIR=${HOME}
		# added path to common package installations and macports 
		PATH=${PATH}:/usr/local/bin:/opt/local/bin
		# opendiff doesn't block shell script until it ends. And direct call of FileMerge dosn't
		# take arguments.
		#MERGE_BIN="/Developer/Applications/Utilities/FileMerge.app/Contents/MacOS/FileMerge"
		MERGE_BIN="_opendiff"
		;;
        *)
		# If you discover new shells that can't handle dev tty etc. as
		# below, then tailor it here.
		echo Platform not supported >&2
		exit 1
		;;
esac

EDITOR=${EDITOR:=vi}
PAGER=${PAGER:=view}
GPGFILE_EXTENSION=${GPGFILE_EXTENSION:-.gpg}
GPGFILE=${PASSWORD_DIR}/${PASSWORD_FILE}${GPGFILE_EXTENSION}

## Functions

#===  FUNCTION  ================================================================
#          NAME:  usage
#   DESCRIPTION:  prints usage
#    PARAMETERS:  none
#       RETURNS:  string to stdout
#===============================================================================
usage ()
{
	cat <<EOFUSAGE
Usage: $PROGRAM [-hVv] [edit|see|search [<keywords>]|merge]

DESCRIPTION
	stores your passwords in a gpg encrypted file.

OPTIONS
	-h this information
	-V prints version end exits
	-v enable verbose output
        -D enable debug mode

MODES
	edit (default mode)
		Add or change passwords in file (default: $EDITOR)
	see
		Read-only access to password file (default: $PAGER)
	search
		Search for pattern in file
	merge
		Merge to a hup/spoke using scp

EXITCODES
        1 error in options
        2 can not decrypt file
        3 can not encrypt file

BUGS
Send bug reports to Erik Wenzel <ew@code.de>
EOFUSAGE
}

#===  FUNCTION  ================================================================
#          NAME:  msgError
#   DESCRIPTION:  echos a error message to /dev/stderr
#    PARAMETERS:  $@ = additional information
#       RETURNS:  string to stderr
#===============================================================================
msgError ()
{
	echo $PROGRAM: "$@" >&2
}


#===  FUNCTION  ================================================================
#          NAME:  msgOnFailedExitStatus
#   DESCRIPTION:  echo a message on a non zero exit status of a process to 
#                 stderr. Exit code are 1 >= 255.
#    PARAMETERS:  $1 = process name, $2 = exit status number
#       RETURNS:  string to stderr
#===============================================================================
msgOnFailedExitStatus ()
{
	if [ "$2" -ge 1 -a "$2" -le 255 ]
	then
		echo "Process $1 return exit status $2. Exiting..." >&2
		exit $2
	fi
}

#===  FUNCTION  ================================================================
#          NAME:  msgDebug
#   DESCRIPTION:  echos a debugging string to stderr if debug flag is enabled
#    PARAMETERS:  $1 = value of debugging flag, $* = debugging string
#       RETURNS:  string to stderr
#===============================================================================
msgDebug ()
{
	debugString="$*"
	# "${debugString#* }" removes first argument, which is the debug level.
	[ $1 -le $DEBUG ] && echo "DEBUG${1}: ${debugString#* }" >&2
}


#===  FUNCTION  ================================================================
#          NAME:  msgVerbose
#   DESCRIPTION:  prints a message only when verbose option is set 
#                 'msgVerbose -n' suppresses trailing newline
#    PARAMETERS:  $1 optional "-n", $* string to print
#       RETURNS:  string to stdout
#===============================================================================
msgVerbose ()
{
        local echooption=""
        if [ "X$1" = "X-n" ]
        then
                echooption="-n"
                shift
        fi
        if [ "X$option_verbose" = "Xyes" ]
        then
                msgDebug 9 echo option: $echooption everything else: "$*"
                echo $echooption "$*"
        else
                msgDebug 9 verbose option not enabled
        fi
}

#===  FUNCTION  ================================================================
#          NAME:  msgVerboseError
#   DESCRIPTION:  echos a error message when verbose option is set
#    PARAMETERS:  $* string to print
#       RETURNS:  string to stderr
#===============================================================================
msgVerboseError ()
{
	if [ "X$option_verbose" = "Xyes" ]
	then
		msgError "$*"
	fi
}


#===  FUNCTION  ================================================================
#          NAME:  _mktemp
#   DESCRIPTION:  os independent mktemp creation
#    PARAMETERS:  none
#       RETURNS:  absolute path and filename
#===============================================================================
_mktemp ()
{
	_uname=`uname`
	local TEMPFILE=""
	case "$_uname" in
	Linux*)
		TEMPFILE=`mktemp -p ${TMPDIR:-/tmp} ${PROGRAM}.XXXXXXXX`
		;;
	Darwin*)
		TEMPFILE=`mktemp -t ${PROGRAM}.XXXXXXXX`
		;;
	*)
		# If you discover new shells that can't handle dev tty etc. as
		# below, then tailor it here.
		echo Platform not supported >&2
		exit 1
		;;
	esac
	msgDebug 1 TEMPFILE name returned from '_mktemp()' : $TEMPFILE
	echo $TEMPFILE
}


#===  FUNCTION  ================================================================
#          NAME:  _opendiff
#   DESCRIPTION:  do block opendiff until FileMerge exits
#    PARAMETERS:  all parameters are passed to opendiff
#       RETURNS:  exit code
#===============================================================================
_opendiff () {
	echo `opendiff "$@"` > /dev/null
}


#===  FUNCTION  ================================================================
#          NAME:  gpg_decrypt
#   DESCRIPTION:  gpg decrypts a file and writes it to a temporary file
#    PARAMETERS:  $1 = file, $2 output file
#       RETURNS:  exit code of gpg
#===============================================================================
gpg_decrypt ()
{
	local TMPFILE=""
	# if optional $2 is an other file then $TMPFILE
	if [ X$2 != "X" ]
	then
		TMPFILE=$2
	fi
	msgDebug 1 writing cleartext file to: $TMPFILE
	# last option _must_ be --decrypt. do not reorder options
	gpg --homedir ${HOMEDIR} --yes --output "$TMPFILE" --decrypt $1
	if [ -s $TMPFILE ]
	then
		return 0
	else
		return 1
	fi
}

#===  FUNCTION  ================================================================
#          NAME:  gpg_encrypt
#   DESCRIPTION:  gpg encrypts a file in $2, when available and writes it in $1
#                 Key-IDs aren't passed as arguments but with a global variable.
#    PARAMETERS:  $1 = output filename $2 input tmpfile (optional)
#       RETURNS:  exit code of gpg
#===============================================================================
gpg_encrypt ()
{
	if [ "x$RECIPIENT_KEY_ID" = "x" ]
	then
		RECIPIENTS_OPTS=" --default-recipient-self "
		msgDebug 1 No receipient key found, encrypting to my self only
	else
		# get default recipient on currently used keyring
		RECIPIENTS_OPTS="-r 0x`gpg --list-key | head -n6 | grep "^pub" | cut -d" " -f4 | cut -d/ -f2`"
		RECIPIENTS_OPTS="${RECIPIENTS_OPTS} -r $RECIPIENT_KEY_ID"
		msgDebug 1 Found recipient key
	fi
	if [  x$2 = "x" ]
	then
		gpg --homedir ${HOMEDIR} --yes --trust-model always $RECIPIENTS_OPTS --encrypt $1
	else
		gpg --homedir ${HOMEDIR} --yes --trust-model always --output $1 \
		$RECIPIENTS_OPTS --encrypt $2
	fi
}

#===  FUNCTION  ================================================================
#          NAME:  check_usb_device
#   DESCRIPTION:  when usb is mounted at $mountpoint use pass file and key on
#                 that device
#    PARAMETERS:  $1 is an absolute path 
#       RETURNS:  nothing
#===============================================================================
check_usb_device ()
{
	# check if usb memory is mounted. Then use gpg key on usb device.
	if [ -d ${MOUNTPOINT} ]
	then
		msgDebug 1 Found a mounted USB Memory Stick
		PASSWORD_DIR=${MOUNTPOINT}/${USB_PASSWORD_DIR}
		HOMEDIR=${MOUNTPOINT}/${USB_GNUPG_DIR}
	else
		# go with standard installation
		msgDebug 1 No USB device found\; Using default gpg key
		PASSWORD_DIR=$HOME
		HOMEDIR=${HOME}/.gnupg
	fi
}

#===  FUNCTION  ================================================================
#          NAME:  copy_from_hup
#   DESCRIPTION:  scp a remote file to a local temp file. scp parameter are
#                 passed as global variables
#    PARAMETERS:  none
#       RETURNS:  path and filename of temp file
#===============================================================================
copy_from_hup ()
{
	local HUP_TEMPFILE=`_mktemp`
	scp $SCP_OPTIONS $HUP_PASSWORD_FILE $HUP_TEMPFILE
	if [ $? = 0 ]
	then
		echo $HUP_TEMPFILE
	else
		msgVerboseError scp $SCP_OPTIONS $HUP_PASSWORD_FILE $HUP_TEMPFILE failed
	fi
}

#===  FUNCTION  ================================================================
#          NAME:  copy_to_hup
#   DESCRIPTION:  scp a local file to a remote host
#    PARAMETERS:  $1 = local file to be copied to remote host
#       RETURNS:  exit code
#===============================================================================
copy_to_hup ()
{
	scp $SCP_OPTIONS $1 $HUP_PASSWORD_FILE || msgOnFailedExitStatus
	return 0
}

#===  FUNCTION  ================================================================
#          NAME:  cleanup
#   DESCRIPTION:  removes $TMPFILE and $HUP_TEMPFILE from filesystem. Uses wipe
#                 if it is installed. Both files are passed as global variables.
#    PARAMETERS:  none
#       RETURNS:  noting
#===============================================================================
cleanup ()
{
	if `which wipe`
	then
		wipe -f -s $TMPFILE 
		if [ -f $HUP_TEMPFILE ]
		then
			wipe -f -s $HUP_TEMPFILE
		fi
	else
		rm -f $TMPFILE
		if [ -f $HUP_TEMPFILE ] 
		then 
			rm -f $HUP_TEMPFILE
		fi
		msgVerbose "TMPFILE only removed -- NOT secure! Install: wipe"
	fi
}

#
## MAIN
#
TMPFILE=`_mktemp`
SEARCH_PATTERN=""

# use bash builtin getopts
while getopts DVvh name
do
        case $name in
                D) DEBUG=1
		;;
                h) usage
                   exit 0
		;;
                V) echo $VERSION
                   exit 0
		;;
                v) option_verbose="yes"
		;;
                ?) usage
                   exit 1
		;;
        esac
done

#shift $(($OPTIND - 1))
# SunOS 5.8 /bin/sh doesn't know $(()) and $() expressions. See "C1" in FAQ.gz
#  from bash package for a complete list of differences between sh and bash.
shift `expr $OPTIND - 1`

check_usb_device

# Initializing files on the first run
msgDebug 1 Using GPGFILE: $GPGFILE
if [ ! -f $GPGFILE -o -z $GPGFILE ]
then
	touch $GPGFILE
	TMP_CLEARTEXT_FILE=`_mktemp`
	msgVerbose Created candidate cleartext password file. Save it and it will be encrypted.
	$EDITOR $TMP_CLEARTEXT_FILE
	gpg_encrypt $TMP_CLEARTEXT_FILE && msgVerbose $GPGFILE created.
	msgDebug 1 No encrypted file found: Created $GPGFILE
	rm -f $TMP_CLEARTEXT_FILE
fi

msgDebug 1 \$1 has value: $1
msgDebug 1 \$* has value: $*
#
# Now process all values of $0
case $1 in
	edit)
		# Default mode
		:
	;;
	see)
		EDITOR=$PAGER
	;;
	merge)
		SUCCESSFUL_DECRYPT=0
		TMP_HUP_DECRYPT_FILE=`_mktemp`
		msgDebug 1 \$TMP_HUP_DECRYPT_FILE = $TMP_HUP_DECRYPT_FILE
		# copy_from_hup returns path to hup_tempfile
		HUP_GPGFILE=`copy_from_hup`
		msgDebug 1 \$HUP_GPGFILE = $HUP_GPGFILE
		msgDebug 1 tmp files are created
		# compare ctimes of both files.
		if [ "$HUP_GPGFILE" -nt "$GPGFILE" ]
		then
			MERGEFILE=$TMPFILE
			msgVerbose 'Password file on Remote Host is newer'
			echo merged changes are written to file on localhost
		else
			MERGEFILE=$TMP_HUP_DECRYPT_FILE
			msgVerbose 'Password file on local Host is newer'
			echo merged changes are written to file on hup
		fi
		# if not empty
		if [ X$HUP_GPGFILE != "X" ]
		then
			gpg_decrypt $HUP_GPGFILE $TMP_HUP_DECRYPT_FILE && SUCCESSFUL_DECRYPT=$((SUCCESSFUL_DECRYPT + 1))
			gpg_decrypt $GPGFILE $TMPFILE && SUCCESSFUL_DECRYPT=$((SUCCESSFUL_DECRYPT + 1))
			if [ $SUCCESSFUL_DECRYPT -eq 2 ]
			then
				msgDebug 1 \$GPGFILE = $GPGFILE
				msgDebug 1 \$HUP_GPGFILE = $HUP_GPGFILE
				msgDebug 1 \$TMP_HUP_DECRYPT_FILE = $TMP_HUP_DECRYPT_FILE
				msgDebug 1 \$TMPFILE = $TMPFILE
				read -p 'Hup file is left, local file is right. ok?[Y/n]' REPLY
				if [ "$REPLY" = 'n' ] || [ "$REPLY" = 'N' ]
				then
					msgDebug 1 Exit merge mode 
					exit 0
				fi
				$MERGE_BIN $TMP_HUP_DECRYPT_FILE $TMPFILE -merge $MERGEFILE
			else
				msgDebug 1 \$SUCCESSFUL_DECRYPT = $SUCCESSFUL_DECRYPT
				exit 2
			fi
		else
			msgDebug 1 File is empty: \$HUP_GPGFILE
			exit 13
		fi
		# check for differences after merge
		until ( diff -q $TMP_HUP_DECRYPT_FILE $TMPFILE > /dev/null )
		do
			msgDebug 1 Something went wrong. Try to fix it.
			echo Merged files still differ.
			echo ---
			echo Entering interactive mode to resolve confusion. What to do next:
			echo '[m]erge again,'
			echo '[l]ist both files,'
			echo '[c]hange file to write to,'
			echo 'upload [n]ewer file to hup,'
			echo '[s]ave local file and remove file from hup. Do not copy to hup,'
			echo '[d]o nothing just continue; everything is fine'
			echo '[q] do nothing and quit application'
			read -p'mlcnsdq [m]>' REPLY
			case $REPLY in
			l)	ls -l $TMP_HUP_DECRYPT_FILE $TMPFILE $MERGEFILE;;
			c)	if [ "$MERGEFILE" = "$TMP_HUP_DECRYPT_FILE" ]
				then
					MERGEFILE=$TMPFILE
					echo Changes from merge are written to file on localhost
				else
					echo Changes from merge are written to file that goes to hup
				fi
			;;
			d) :
			;;
			n) # :TODO:12.12.2010 01:03:18 CET:: write newer file to hup
			;;
			s)	if gpg_encrypt $GPGFILE $TMPFILE
				then
					msgDebug 1 Successfully encrypted $GPGFILE
				fi
			;;
			q)	exit 0
			;;
			m|*) $MERGE_BIN $TMP_HUP_DECRYPT_FILE $TMPFILE -merge $MERGEFILE
			;;
			esac
		done
		# Newer file is saved locally and to hup
		if [ "$TMP_HUP_DECRYPT_FILE" -nt "$TMPFILE" ]
		then
			msgVerbose newer file is from hup
			if gpg_encrypt $HUP_GPGFILE $TMP_HUP_DECRYPT_FILE
			then
				msgDebug 1 Successfully encrypted $HUP_GPGFILE
				copy_to_hup $HUP_GPGFILE || msgOnFailedExitStatus
				cp $HUP_GPGFILE $GPGFILE
			fi
		else
			msgVerbose newer file is from localhost
			if gpg_encrypt $GPGFILE $TMPFILE
			then
				msgDebug 1 Successfully encrypted $GPGFILE
				copy_to_hup $GPGFILE || msgOnFailedExitStatus
			fi
		fi
		exit 0
	;;
	search)
		if [ "X" != "X$*" ]
		then
			# all characters following "search " are pattern
			SEARCH_PATTERN="$*"
		fi
	;;
	*)
		msgDebug 1 No Mode specified using default mode: edit
	;;
esac

# default mode is edit. Why is this here and not in the case flow control
# above? Because the case "search" also uses this mode.

if gpg_decrypt $GPGFILE $TMPFILE
then
	msgDebug 1 Successfully decrypted $GPGFILE
	if [ "X$SEARCH_PATTERN" != "X" ]
	then
                # cut off the mode from pattern
		$EDITOR +/"${SEARCH_PATTERN#search }" $TMPFILE
        else
                $EDITOR $TMPFILE
	fi

	if gpg_encrypt $GPGFILE $TMPFILE
	then
		msgDebug 1 Successfully encrypted $GPGFILE
		cleanup
	else
		echo -ne \007
		msgError "Warning could not re-encrypt $TMPFILE";
		exit 3
	fi
else
	msgError "Couldn't decrypt $GPGFILE"
	exit 2
fi

trap 'cleanup; exit 13' 1 2 3 15
exit 0

